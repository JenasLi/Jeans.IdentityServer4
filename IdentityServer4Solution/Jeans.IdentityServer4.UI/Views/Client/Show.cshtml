@model Jeans.IdentityServer4.UI.Core.Entity.Client

@{
    ViewData["Title"] = "Show";
}

<section class="content-header">
    <h1>
        Client
        <small>@ViewData["Title"]</small>
    </h1>
</section>
<section class="content container-fluid">
    <div class="box box-primary">

        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.Enabled)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Enabled)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ClientId)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ClientId)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ProtocolType)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ProtocolType)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RequireClientSecret)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RequireClientSecret)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ClientName)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ClientName)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Description)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Description)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ClientUri)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ClientUri)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.LogoUri)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.LogoUri)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RequireConsent)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RequireConsent)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AllowRememberConsent)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AllowRememberConsent)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AlwaysIncludeUserClaimsInIdToken)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AlwaysIncludeUserClaimsInIdToken)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RequirePkce)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RequirePkce)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AllowPlainTextPkce)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AllowPlainTextPkce)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AllowAccessTokensViaBrowser)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AllowAccessTokensViaBrowser)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.FrontChannelLogoutUri)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.FrontChannelLogoutUri)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.FrontChannelLogoutSessionRequired)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.FrontChannelLogoutSessionRequired)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.BackChannelLogoutUri)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.BackChannelLogoutUri)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.BackChannelLogoutSessionRequired)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.BackChannelLogoutSessionRequired)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AllowOfflineAccess)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AllowOfflineAccess)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.IdentityTokenLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.IdentityTokenLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AllowedIdentityTokenSigningAlgorithms)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AllowedIdentityTokenSigningAlgorithms)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AccessTokenLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AccessTokenLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AuthorizationCodeLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AuthorizationCodeLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ConsentLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ConsentLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AbsoluteRefreshTokenLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AbsoluteRefreshTokenLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.SlidingRefreshTokenLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.SlidingRefreshTokenLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RefreshTokenUsage)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RefreshTokenUsage)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.UpdateAccessTokenClaimsOnRefresh)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UpdateAccessTokenClaimsOnRefresh)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RefreshTokenExpiration)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RefreshTokenExpiration)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AccessTokenType)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AccessTokenType)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.EnableLocalLogin)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.EnableLocalLogin)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.IncludeJwtId)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.IncludeJwtId)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AlwaysSendClientClaims)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.AlwaysSendClientClaims)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ClientClaimsPrefix)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ClientClaimsPrefix)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.PairWiseSubjectSalt)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.PairWiseSubjectSalt)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Created)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Created)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Updated)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Updated)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.LastAccessed)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.LastAccessed)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.UserSsoLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserSsoLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.UserCodeType)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.UserCodeType)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.DeviceCodeLifetime)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.DeviceCodeLifetime)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.NonEditable)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.NonEditable)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Id)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Id)
            </dd>
            <dt>
                ClientGrantTypes
            </dt>
            <dd>
                @foreach (var item in Model.ClientGrantTypes)
                {
                    <p>@item.GrantType</p>
                }
            </dd>
            <dt>
                ClientSecrets
            </dt>
            <dd>
                @foreach (var item in Model.ClientSecrets)
                {
                    <p>@item.Value</p>
                }
            </dd>
            <dt>
                ClientScopes
            </dt>
            <dd>
                @foreach (var item in Model.ClientScopes)
                {
                    <p>@item.Scope</p>
                }
            </dd>
        </dl>

        <div class="box-footer text-center">
            <a asp-controller="Client" asp-action="List" class="btn btn-default pull-left">
                <i class="fa fa-arrow-left"></i>
                返回列表
            </a>
        </div>

    </div>
</section>
